use approx::{assert_abs_diff_eq, assert_relative_eq};
use fastrand::Rng;
use itertools::{izip, Itertools};
use ord_subset::OrdSubsetSliceExt;

use uniarity::cheb::Cheb;

const N_TESTS: usize = 1_000;

#[test]
fn test_small_polynomials() {
  let mut rng = Rng::with_seed(1234);

  for _ in 0..N_TESTS {
    let a = 0.0;
    let b = 5.0;
    let n_roots = rng.usize(1..=10);

    let mut known_roots: Vec<_> = (0..n_roots).map(|_| a + (b - a) * rng.f64()).collect();
    known_roots.ord_subset_sort();

    if known_roots.iter().tuple_windows().any(|(a, b)| b - a < 0.1) {
      continue;
    }

    let f = |x: f64| {
      known_roots
        .iter()
        .map(|&root| x - root)
        .reduce(|acc, x| acc * x)
        .unwrap()
    };

    // let n = 20;
    // let z = (0..n)
    //   .map(|i| {
    //     let x = (b - a) * (i as f64 / n as f64) + a;
    //     (x, f(x))
    //   })
    //   .collect::<Vec<_>>();
    // println!("{z:?}");

    // Compare values
    let cheb = Cheb::new(&f, a, b, n_roots + 1);
    let n = 100;
    for i in 0..n {
      let x = (a - 0.2) + (b - a + 0.4) * (i as f64 / n as f64);
      assert_relative_eq!(f(x), cheb.evaluate(x), epsilon = 1e-9, max_relative = 1e-9);
    }

    // Compare roots
    for n in n_roots + 1..=n_roots + 10 {
      let cheb = Cheb::new(&f, a, b, n);
      let roots = cheb.roots();

      // cheb.debug(100);
      // dbg!(&roots, &known_roots);

      for &x in known_roots.iter() {
        assert_abs_diff_eq!(f(x), 0.0, epsilon = 1e-13);
      }

      for (&x1, &x2) in izip!(known_roots.iter(), roots.iter()) {
        assert_abs_diff_eq!(x1, x2, epsilon = 1e-5 * (b - a));
      }
    }
  }
}

#[test]
fn test_constant() {
  // This is a degenerate case. We define it to have no roots.
  let cheb = Cheb::new(&|_| 0.0, -10.0, 10.0, 10);
  assert!(cheb.roots().is_empty());

  let cheb = Cheb::new(&|_| -2.0, -10.0, 10.0, 10);
  assert!(cheb.roots().is_empty());
}

fn interpolate(points: &[(f64, f64)], x: f64) -> f64 {
  if x < points[0].0 {
    return points[0].1;
  }

  for i in 0..points.len() - 1 {
    let (x1, y1) = points[i];
    let (x2, y2) = points[i + 1];

    if x1 <= x && x <= x2 {
      return y1 + (y2 - y1) * (x - x1) / (x2 - x1);
    }
  }

  points.last().unwrap().1
}

#[test]
/// A specific test case that gave many invalid roots in a naive implementation
fn test_numerically_unstable() {
  let points = [
    (1.8680292018940952, 0.1353391644379256),
    (1.8684375650890304, 0.13907052747372053),
    (1.8692503587180995, 0.14652266995730073),
    (1.8704597551343365, 0.15767235035996457),
    (1.8720541071891295, 0.17247969490334877),
    (1.8740180604006293, 0.1908826703746336),
    (1.8763327008258037, 0.2127905170549234),
    (1.8789757372120464, 0.23807680283382537),
    (1.8819217156741275, 0.2665728717348043),
    (1.8851422648290217, 0.2980625125183659),
    (1.8886063690278359, 0.33227864082948744),
    (1.8922806670534635, 0.3689026528787401),
    (1.8961297734073421, 0.40756686642438567),
    (1.9001166190911487, 0.4478601348315979),
    (1.9042028086015161, 0.48933634566225875),
    (1.9083489896997212, 0.5315251585527776),
    (1.9125152323952557, 0.5739440647228747),
    (1.9166614134934608, 0.6161107157326811),
    (1.9207476030038282, 0.6575544965109199),
    (1.9247344486876348, 0.6978264954088199),
    (1.9285835550415134, 0.7365073081394625),
    (1.932257853067141, 0.7732124405111743),
    (1.9357219572659552, 0.8075953836493146),
    (1.9389425064208494, 0.8393486762126262),
    (1.9418884848829305, 0.8682034151460651),
    (1.9445315212691732, 0.8939277274282755),
    (1.9468461616943475, 0.916324685799759),
    (1.9488101149058474, 0.9352300673680148),
    (1.9504044669606404, 0.9505102433616637),
    (1.9516138633768774, 0.9620603758858991),
    (1.9524266570059465, 0.9698030015752147),
    (1.9528350202008817, 0.9736870133102129),
  ];

  let a = 1.8679780641353219;
  let b = 1.952886157959655;

  let cheb = Cheb::new(&|x| interpolate(&points, x), a, b, 32);
  let roots = cheb.roots();

  assert!(roots.is_empty());
}

#[test]
/// A specific test case that did not find any roots in a naive implementation
fn test_numerically_unstable2() {
  let points = [
    (5.398946476469623, 0.011027578139191752),
    (5.399064507973742, 0.010770586307948193),
    (5.399182539477861, 0.010513367552175024),
    (5.399300570981979, 0.010255922337039036),
    (5.399418602486098, 0.009998251131657476),
    (5.399536633990217, 0.009740354409170704),
    (5.399654665494336, 0.009482232646777111),
    (5.399772696998455, 0.009223886325784636),
    (5.399890728502573, 0.008965315931674822),
    (5.400008760006692, 0.008706521954132462),
    (5.400126791510811, 0.008447504887125867),
    (5.40024482301493, 0.008188265228938563),
    (5.400362854519049, 0.007928803482237401),
    (5.400480886023167, 0.007669120154123632),
    (5.400598917527286, 0.007409215756184195),
    (5.400716949031405, 0.007149090804559499),
    (5.400834980535524, 0.006888745819994713),
    (5.4009530120396425, 0.006628181327899774),
    (5.4010710435437606, 0.0063673978584119495),
    (5.4011890750478795, 0.006106395946448795),
    (5.401307106551998, 0.005845176131781371),
    (5.401425138056117, 0.005583738959090867),
    (5.401543169560236, 0.00532208497802833),
    (5.401661201064354, 0.005060214743293323),
    (5.401779232568473, 0.004798128814676117),
    (5.401897264072592, 0.004535827757152833),
    (5.402015295576711, 0.004273312140930019),
    (5.40213332708083, 0.0040105825415257534),
    (5.402251358584948, 0.003747639539841585),
    (5.402369390089067, 0.003484483722216436),
    (5.402487421593186, 0.0032211156805246888),
    (5.402605453097305, 0.002957536012226203),
    (5.402723484601424, 0.002693745320459573),
    (5.402841516105542, 0.0024297442141044123),
    (5.402959547609661, 0.0021655333078617334),
    (5.40307757911378, 0.00190111322233949),
    (5.403195610617899, 0.0016364845841240205),
    (5.403313642122018, 0.001371648025868366),
    (5.403431673626136, 0.0011066041863667109),
    (5.403549705130255, 0.0008413537106404245),
    (5.4036677366343735, 0.0005758972500296555),
    (5.403785768138492, 0.0003102354622734893),
    (5.403903799642611, 4.4369011600431385e-5),
    (5.404021831146729, -0.00022170143118016572),
    (5.404139862650848, -0.00048797518859811095),
    (5.404257894154967, -0.0007544515764081328),
    (5.404375925659086, -0.0010211299035171595),
    (5.404493957163205, -0.0012880094718727975),
    (5.404611988667323, -0.0015550895763720152),
    (5.404730020171442, -0.00182236950477066),
    (5.404848051675561, -0.0020898485375598908),
    (5.40496608317968, -0.00235752594788613),
    (5.405084114683799, -0.0026254010014286067),
    (5.405202146187917, -0.0028934729563049877),
    (5.405320177692036, -0.0031617410629594667),
    (5.405438209196155, -0.003430204564046746),
    (5.405556240700274, -0.003698862694323901),
    (5.405674272204393, -0.003967714680536305),
    (5.405792303708511, -0.004236759741295282),
    (5.40591033521263, -0.004505997086973634),
    (5.406028366716749, -0.004775425919562537),
    (5.4061463982208675, -0.00504504543256451),
    (5.406264429724986, -0.005314854810862857),
    (5.4063824612291045, -0.005584853230589104),
    (5.406500492733223, -0.005855039859007094),
    (5.406618524237342, -0.006125413854356221),
    (5.406736555741461, -0.00639597436573891),
    (5.40685458724558, -0.006666720532965298),
    (5.406972618749698, -0.0069376514864200045),
    (5.407090650253817, -0.00720876634692702),
    (5.407208681757936, -0.007480064225580618),
    (5.407326713262055, -0.0077515442236194),
    (5.407444744766174, -0.008023205432255542),
    (5.407562776270292, -0.008295046932533412),
    (5.407680807774411, -0.008567067795165695),
    (5.40779883927853, -0.00883926708036814),
    (5.407916870782649, -0.009111643837698469),
    (5.408034902286768, -0.009384197105888448),
    (5.408152933790886, -0.009656925912667924),
    (5.408270965295005, -0.009929829274601842),
    (5.408388996799124, -0.010202906196892125),
    (5.408507028303243, -0.010476155673210197),
    (5.4086250598073615, -0.010749576685504858),
    (5.40874309131148, -0.011023168203811162),
    (5.4088611228155985, -0.011296929186064009),
    (5.408979154319717, -0.011570858577885756),
    (5.409097185823836, -0.011844955312398264),
    (5.409215217327955, -0.012119218310001567),
    (5.409333248832073, -0.01239364647817548),
    (5.409451280336192, -0.012668238711261604),
    (5.409569311840311, -0.012942993890224075),
    (5.40968734334443, -0.013217910882452444),
    (5.409805374848549, -0.013492988541509932),
    (5.409923406352667, -0.013768225706909387),
    (5.410041437856786, -0.014043621203865764),
    (5.410159469360905, -0.014319173843053423),
    (5.410277500865024, -0.014594882420349398),
    (5.410395532369143, -0.01487074571658148),
    (5.410513563873261, -0.015146762497257826),
    (5.41063159537738, -0.015422931512309057),
    (5.410749626881499, -0.015699251495796707),
    (5.410867658385618, -0.01597572116564483),
    (5.410985689889736, -0.016252339223336132),
    (5.411103721393855, -0.01652910435363908),
    (5.411221752897974, -0.016806015224278048),
    (5.4113397844020925, -0.017083070485640783),
    (5.411457815906211, -0.01736026877046043),
    (5.4115758474103295, -0.017637608693476525),
    (5.411693878914448, -0.017915088851126304),
    (5.411811910418567, -0.01819270782117527),
    (5.411929941922686, -0.01847046416239012),
    (5.412047973426805, -0.018748356414168943),
    (5.412166004930923, -0.01902638309617194),
    (5.412284036435042, -0.019304542707963057),
    (5.412402067939161, -0.01958283372859726),
    (5.41252009944328, -0.01986125461624727),
    (5.412638130947399, -0.020139803807785572),
    (5.412756162451517, -0.020418479718371074),
    (5.412874193955636, -0.020697280741027224),
    (5.412992225459755, -0.020976205246195645),
    (5.413110256963874, -0.021255251581289325),
    (5.413228288467993, -0.021534418070236372),
    (5.413346319972111, -0.021813703012993124),
    (5.41346435147623, -0.022093104685079634),
    (5.413582382980349, -0.022372621337054033),
    (5.413700414484468, -0.022652251194015816),
    (5.4138184459885865, -0.022931992455078154),
    (5.413936477492705, -0.023211843292813672),
    (5.4140545089968235, -0.023491801852719596),
    (5.414172540500942, -0.02377186625261879),
    (5.414290572005061, -0.024052034582093818),
    (5.41440860350918, -0.02433230490186794),
    (5.414526635013298, -0.024612675243187665),
    (5.414644666517417, -0.02489314360718753),
    (5.414762698021536, -0.02517370796422075),
    (5.414880729525655, -0.0254543662531887),
    (5.414998761029774, -0.02573511638084064),
    (5.415116792533892, -0.026015956221055125),
    (5.415234824038011, -0.02629688361410576),
    (5.41535285554213, -0.026577896365889142),
    (5.415470887046249, -0.026858992247145774),
    (5.415588918550368, -0.02714016899265448),
    (5.415706950054486, -0.02742142430038602),
    (5.415824981558605, -0.02770275583066617),
    (5.415943013062724, -0.02798416120526198),
    (5.416061044566843, -0.0282656380064904),
    (5.416179076070962, -0.028547183776263363),
    (5.41629710757508, -0.028828796015113567),
    (5.416415139079199, -0.029110472181207936),
    (5.4165331705833175, -0.029392209689283855),
    (5.4166512020874364, -0.02967400590960234),
    (5.416769233591555, -0.02995585816682822),
    (5.416887265095673, -0.030237763738893864),
    (5.417005296599792, -0.03051971985582197),
    (5.417123328103911, -0.030801723698497818),
    (5.41724135960803, -0.031083772397413056),
    (5.417359391112149, -0.03136586303135713),
    (5.417477422616267, -0.031647992626073485),
    (5.417595454120386, -0.031930158152870036),
    (5.417713485624505, -0.03221235652713961),
    (5.417831517128624, -0.03249458460691479),
    (5.417949548632743, -0.032776839191277884),
    (5.418067580136861, -0.03305911701876979),
    (5.41818561164098, -0.03334141476573543),
    (5.418303643145099, -0.033623729044578554),
    (5.418421674649218, -0.03390605640199473),
    (5.418539706153337, -0.034188393317101495),
    (5.418657737657455, -0.0344707361995209),
    (5.418775769161574, -0.03475308138739208),
    (5.418893800665693, -0.035035425145275356),
    (5.4190118321698115, -0.03531776366202305),
    (5.4191298636739305, -0.035600093048524295),
    (5.4192478951780485, -0.03588240933539433),
    (5.419365926682167, -0.036164708470554086),
    (5.419483958186286, -0.03644698631671306),
    (5.419601989690405, -0.036729238648758156),
    (5.419720021194524, -0.03701146115103571),
    (5.419838052698642, -0.03729364941451213),
    (5.419956084202761, -0.03757579893384061),
    (5.42007411570688, -0.037857905104264566),
    (5.420192147210999, -0.03813996321843166),
    (5.420310178715118, -0.03842196846305057),
    (5.420428210219236, -0.03870391591540129),
    (5.420546241723355, -0.03898580053971584),
    (5.420664273227474, -0.03926761718335964),
    (5.420782304731593, -0.039549360572891434),
    (5.420900336235712, -0.03983102530990518),
    (5.42101836773983, -0.040112605866709394),
    (5.421136399243949, -0.04039409658180809),
    (5.421254430748068, -0.04067549165514883),
    (5.421372462252187, -0.04095678514317663),
    (5.4214904937563055, -0.04123797095363729),
    (5.421608525260424, -0.04151904284014596),
    (5.4217265567645425, -0.04179999439648391),
    (5.4218445882686614, -0.04208081905061495),
    (5.42196261977278, -0.04236151005841682),
    (5.422080651276899, -0.042642060497096845),
    (5.422198682781017, -0.04292246325826843),
    (5.422316714285136, -0.043202711040697506),
    (5.422434745789255, -0.043482796342635466),
  ];

  let a = 5.398946476469623;
  let b = 5.422434745789255;

  let cheb = Cheb::new(&|x| interpolate(&points, x), a, b, 32);
  let roots = cheb.roots();

  assert!(roots.len() == 1);
  assert_abs_diff_eq!(roots[0], 5.404, epsilon = 1e-3);
}
